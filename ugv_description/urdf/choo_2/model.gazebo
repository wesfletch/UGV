<?xml version="1.0"?>
<robot>

    <!--
        This file contains Gazebo-specific information:
            * simulation plugins
            * physical constants used by Gazebo (but not by ROS)
    -->

    <gazebo reference="back_left_caster">
        <!-- force caster to be frictionless
             by default, mu is 1.0 (max friction) -->
        <mu1>0.0</mu1>
        <mu2>0.0</mu2>
    </gazebo>

    <gazebo reference="back_left_caster_joint">
        <!--
            We need to use the preserveFixedJoint tag to stop Gazebo smushing every fixed joint into base_link (which is default behavior)
        -->
        <preserveFixedJoint>true</preserveFixedJoint>
    </gazebo>

    <gazebo reference="imu_joint">
        <preserveFixedJoint>true</preserveFixedJoint>
    </gazebo>

    <gazebo>
        <!-- differential drive plugin; publishes odom frame-->
        <plugin filename="libgazebo_ros_diff_drive.so" name="diff_drive_controller">
            <ros>
                <namespace>${robot}</namespace>
                <debug_level>debug</debug_level>

                <remapping>cmd_vel:=/cmd_vel</remapping>
                <remapping>odom:=odom</remapping>
            </ros>

            <!-- wheels -->
            <left_joint>front_left_wheel_joint</left_joint>
            <right_joint>front_right_wheel_joint</right_joint>
            
            <!-- kinematics-->
            <wheel_separation>${wheelbase}</wheel_separation>
            <wheel_diameter>${wheel_radius * 2}</wheel_diameter>
            <max_wheel_torque>4</max_wheel_torque>   <!-- in Nm -->

            <!-- outputs -->
            <!-- <odometry_source>world</odometry_source>  -->
            <publish_odom>true</publish_odom> 
            <update_rate>100</update_rate>

            <!-- tf -->
            <publish_tf>true</publish_tf> <!-- publish the transforms -->
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>false</publish_wheel_tf>
            <odometry_frame>/odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>

            <!-- Set to true to swap right and left wheels, defaults to true -->
            <legacy_mode>true</legacy_mode>
        </plugin>
    </gazebo>

    <!-- stereo camera simulation plugin -->
    <gazebo reference="camera">
        <sensor name="depth_sensor" type="depth">
            <!-- Set always_on only for sensor, not on plugin -->
            <always_on>true</always_on>
            <!-- Set update_rate only for sensor, not on plugin -->
            <updateRate>10</updateRate>

            <camera name="depth_camera">
                <horizontal_fov>1.2</horizontal_fov>
                <image>
                    <width>320</width>
                    <height>240</height>
                </image>
                <clip>
                    <near>0.5</near>
                    <far>5</far>
                </clip>
                <!-- no distortions: "ideal" camera -->
                <distortion>
                    <k1>0.0</k1>
                    <k2>0.0</k2>
                    <k3>0.0</k3>
                    <p1>0.0</p1>
                    <p2>0.0</p2>
                    <center>0.0 0.0</center>
                </distortion>
            </camera>

            <visualize>true</visualize>
            
            <plugin name="depth_cam_plugin" filename="libgazebo_ros_camera.so">
                <ros>
                    <namespace>${robot}</namespace>

                    <!-- configure output topics; 
                         no leading slash means prepended with namespace value (AKA relative names) -->
                    <remapping>image_raw:=image/image</remapping>
                    <remapping>camera_info:=image/camera_info</remapping>
                    <remapping>custom_cam/image_depth:=depth/image</remapping>
                    <remapping>custom_cam/camera_info_depth:=depth/camera_info</remapping>
                    <remapping>custom_cam/points:=depth/points</remapping>
                </ros>
                                
                <camera_name>depth_cam</camera_name>
                <frame_name>/camera_depth_link</frame_name>

                <hack_baseline>0.05</hack_baseline>
                <min_depth>0.05</min_depth>
                <max_depth>5</max_depth>
            </plugin>
        </sensor>
    </gazebo>

    <!-- GPS simulation plugin -->
    <gazebo reference="baselink">
        <sensor name="gps" type="gps">
            <always_on>true</always_on>
            <update_rate>30</update_rate>
            <gps>
                <position_sensing>
                    <horizontal>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                    </horizontal>
                    <vertical>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>                        
                    </vertical>
                </position_sensing>
            </gps>

            <plugin name="gps_plugin" filename="libgazebo_ros_gps_sensor.so">
                <ros>
                    <namespace>${robot}</namespace>
                    <remapping>~/out:=fix</remapping>
                </ros>
            </plugin>
        </sensor>
    </gazebo>

    <!-- imu simulation plugin -->
    <gazebo reference="vectornav"> <!-- can't use reference because gazebo squashes fixed joints + links into base_link -->
        <sensor name="imu_sensor" type="imu">
            <always_on>true</always_on>
            <update_rate>50.0</update_rate>
            <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
                <ros>
                    <namespace>${robot}</namespace>
                    <remapping>~/out:=vectornav/IMU</remapping>
                </ros>
                <frame_name>vectornav</frame_name>
            </plugin>
        </sensor>
    </gazebo>

    <!-- lidar simulation plugin -->
    <gazebo reference="velodyne">
        <sensor name="laser_sensor" type="ray">
            <ray>
                <scan>
                    <horizontal>
                        <samples>1875</samples>
                        <resolution>1</resolution>
                        <min_angle>-3.14159</min_angle>                        
                        <max_angle>3.14159</max_angle>
                    </horizontal>
                    <vertical>
                        <samples>16</samples>
                        <resolution>1</resolution>
                        <min_angle>-0.2618</min_angle>
                        <max_angle>0.2618</max_angle>
                    </vertical>
                </scan>
                <range>
                    <min>0.9</min>
                    <max>130</max>
                    <resolution>0.01</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.0</stddev>
                </noise>
            </ray>
            <visualize>false</visualize>
            <plugin name="laser_plugin" filename="libgazebo_ros_velodyne_laser.so">
                <ros>
                    <namespace>${robot}</namespace>
                    <remapping>~/out:=velodyne_points</remapping>
                </ros>
                <frame_name>velodyne</frame_name>
                <organize_cloud>false</organize_cloud>
                <min_range>0.9</min_range>
                <max_range>130</max_range>
                <gaussian_noise>0.008</gaussian_noise>
            </plugin>
        </sensor>
    </gazebo>

</robot>
